{"ast":null,"code":"import env from \"./env\";\nimport keys from \"./lib/key\";\nvar auth = {\n  user: function user(_) {\n    return {\n      username: localStorage.getItem(\"username\"),\n      token: localStorage.getItem(\"token\")\n    };\n  },\n  isSignedIn: function isSignedIn() {\n    return new Promise(function (resolve, reject) {\n      fetch(\"\".concat(env.getCurrent().api, \"checktoken\"), {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        cache: \"force-cache\",\n        method: \"POST\",\n        body: JSON.stringify({\n          \"client_api_key\": keys.blog_post_api_key,\n          \"token\": auth.user().token\n        })\n      }).then(function (res) {\n        res.json();\n      }).then(function (res) {\n        res = JSON.parse(res);\n\n        if (res.type === \"sucsess\") {\n          resolve({\n            isSignedIn: true\n          });\n        } else if (res.type === \"error\") {\n          resolve({\n            isSignedIn: false\n          });\n        } else {\n          reject(\"Error\");\n        }\n      });\n    });\n  },\n  isAValidUser: function isAValidUser() {},\n  canBeHere: function canBeHere() {\n    var url = window.location;\n    var userTypes = {\n      \"NOT_SIGNED_IN\": [\"/\"],\n      \"AUTHOR\": [\"/\", \"/dashboard/*\", \"/createpost\", \"/editprofile\"],\n      \"BASIC_USER\": [\"/\", \"/editprofile\"]\n    };\n  }\n};\nmodule.exports = auth;","map":{"version":3,"sources":["/Users/augustusrizza/javascript_projects/blog/frontend/src/auth.js"],"names":["env","keys","auth","user","_","username","localStorage","getItem","token","isSignedIn","Promise","resolve","reject","fetch","getCurrent","api","headers","cache","method","body","JSON","stringify","blog_post_api_key","then","res","json","parse","type","isAValidUser","canBeHere","url","window","location","userTypes","module","exports"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,OAAhB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,IAAIC,IAAI,GAAG;AACPC,EAAAA,IAAI,EAAE,cAAAC,CAAC,EAAI;AACP,WAAO;AACHC,MAAAA,QAAQ,EAAEC,YAAY,CAACC,OAAb,CAAqB,UAArB,CADP;AAEHC,MAAAA,KAAK,EAAEF,YAAY,CAACC,OAAb,CAAqB,OAArB;AAFJ,KAAP;AAIH,GANM;AAOPE,EAAAA,UAAU,EAAE,sBAAM;AACd,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,MAAAA,KAAK,WAAIb,GAAG,CAACc,UAAJ,GAAiBC,GAArB,iBAAsC;AACvCC,QAAAA,OAAO,EAAE;AACL,oBAAU,kBADL;AAEL,0BAAgB;AAFX,SAD8B;AAKvCC,QAAAA,KAAK,EAAE,aALgC;AAMvCC,QAAAA,MAAM,EAAE,MAN+B;AAOvCC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjB,4BAAkBpB,IAAI,CAACqB,iBADN;AAEjB,mBAASpB,IAAI,CAACC,IAAL,GAAYK;AAFJ,SAAf;AAPiC,OAAtC,CAAL,CAYGe,IAZH,CAYQ,UAAAC,GAAG,EAAI;AACXA,QAAAA,GAAG,CAACC,IAAJ;AACH,OAdD,EAcGF,IAdH,CAcQ,UAAAC,GAAG,EAAI;AACXA,QAAAA,GAAG,GAAGJ,IAAI,CAACM,KAAL,CAAWF,GAAX,CAAN;;AACA,YAAIA,GAAG,CAACG,IAAJ,KAAa,SAAjB,EAA4B;AACxBhB,UAAAA,OAAO,CAAC;AACJF,YAAAA,UAAU,EAAE;AADR,WAAD,CAAP;AAGH,SAJD,MAIO,IAAIe,GAAG,CAACG,IAAJ,KAAa,OAAjB,EAA0B;AAC7BhB,UAAAA,OAAO,CAAC;AACJF,YAAAA,UAAU,EAAE;AADR,WAAD,CAAP;AAGH,SAJM,MAIA;AACHG,UAAAA,MAAM,CAAC,OAAD,CAAN;AACH;AACJ,OA3BD;AA4BH,KA7BM,CAAP;AA8BH,GAtCM;AAuCPgB,EAAAA,YAAY,EAAE,wBAAM,CAEnB,CAzCM;AA0CPC,EAAAA,SAAS,EAAE,qBAAM;AACb,QAAIC,GAAG,GAAGC,MAAM,CAACC,QAAjB;AACA,QAAIC,SAAS,GAAG;AACZ,uBAAkB,CAAC,GAAD,CADN;AAEZ,gBAAW,CAAC,GAAD,EAAM,cAAN,EAAsB,aAAtB,EAAqC,cAArC,CAFC;AAGZ,oBAAe,CAAC,GAAD,EAAO,cAAP;AAHH,KAAhB;AAMH;AAlDM,CAAX;AAqDAC,MAAM,CAACC,OAAP,GAAiBjC,IAAjB","sourcesContent":["import env from \"./env\";\nimport keys from \"./lib/key\"\n\nlet auth = {\n    user: _ => {\n        return {\n            username: localStorage.getItem(\"username\"),\n            token: localStorage.getItem(\"token\")\n        }\n    },\n    isSignedIn: () => {\n        return new Promise((resolve, reject) => {\n            fetch(`${env.getCurrent().api}checktoken`, {\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                cache: \"force-cache\",\n                method: \"POST\",\n                body: JSON.stringify({\n                    \"client_api_key\": keys.blog_post_api_key,\n                    \"token\": auth.user().token\n                })\n\n            }).then(res => {\n                res.json()\n            }).then(res => {\n                res = JSON.parse(res)\n                if (res.type === \"sucsess\") {\n                    resolve({\n                        isSignedIn: true\n                    })\n                } else if (res.type === \"error\") {\n                    resolve({\n                        isSignedIn: false\n                    })\n                } else {\n                    reject(\"Error\")\n                }\n            })\n        });\n    },\n    isAValidUser: () => {\n\n    },\n    canBeHere: () => {\n        let url = window.location;\n        let userTypes = {\n            \"NOT_SIGNED_IN\" : [\"/\"],\n            \"AUTHOR\" : [\"/\", \"/dashboard/*\", \"/createpost\", \"/editprofile\"],\n            \"BASIC_USER\" : [\"/\",  \"/editprofile\"]\n        }\n\n    }\n};\n\nmodule.exports = auth;"]},"metadata":{},"sourceType":"module"}