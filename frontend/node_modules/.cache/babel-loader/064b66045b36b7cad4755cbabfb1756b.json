{"ast":null,"code":"var _this = this;\n\nimport SHA256 from 'crypto-js/sha256';\nvar encrypt = {\n  sha: function sha(e) {\n    return SHA256(e).toString();\n  },\n  get_current_time: function get_current_time() {\n    return new Date().valueOf().toString();\n  },\n  get_random: function get_random() {\n    return Math.random().toString();\n  },\n  create_new_set: function create_new_set(e) {\n    var f = _this.sha(_this.get_current_time() + _this.get_random());\n\n    return {\n      \"salt\": f,\n      \"password\": _this.sha(f + e)\n    };\n  },\n  reproduce_set: function reproduce_set(e, f) {\n    return {\n      \"password\": _this.sha(f + e)\n    };\n  }\n};\nexport default encrypt;","map":{"version":3,"sources":["/Users/augustusrizza/javascript_projects/blog/frontend/src/encrypt.js"],"names":["SHA256","encrypt","sha","e","toString","get_current_time","Date","valueOf","get_random","Math","random","create_new_set","f","reproduce_set"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AAEA,IAAIC,OAAO,GAAG;AACVC,EAAAA,GAAG,EAAE,aAACC,CAAD,EAAO;AACR,WAAOH,MAAM,CAACG,CAAD,CAAN,CAAUC,QAAV,EAAP;AACH,GAHS;AAIVC,EAAAA,gBAAgB,EAAE,4BAAM;AACpB,WAAQ,IAAIC,IAAJ,EAAD,CAAaC,OAAb,GAAuBH,QAAvB,EAAP;AACH,GANS;AAOVI,EAAAA,UAAU,EAAE,sBAAM;AACd,WAAOC,IAAI,CAACC,MAAL,GAAcN,QAAd,EAAP;AACH,GATS;AAUVO,EAAAA,cAAc,EAAE,wBAACR,CAAD,EAAO;AACnB,QAAIS,CAAC,GAAG,KAAI,CAACV,GAAL,CAAU,KAAI,CAACG,gBAAL,KAA0B,KAAI,CAACG,UAAL,EAApC,CAAR;;AACA,WAAO;AACH,cAAQI,CADL;AAEH,kBAAY,KAAI,CAACV,GAAL,CAASU,CAAC,GAAGT,CAAb;AAFT,KAAP;AAIH,GAhBS;AAiBVU,EAAAA,aAAa,EAAE,uBAACV,CAAD,EAAIS,CAAJ,EAAU;AACrB,WAAO;AACH,kBAAY,KAAI,CAACV,GAAL,CAASU,CAAC,GAAGT,CAAb;AADT,KAAP;AAGH;AArBS,CAAd;AA0BA,eAAeF,OAAf","sourcesContent":["import SHA256 from 'crypto-js/sha256'\n\nlet encrypt = {\n    sha: (e) => {\n        return SHA256(e).toString()\n    },\n    get_current_time: () => {\n        return (new Date()).valueOf().toString();\n    },\n    get_random: () => {\n        return Math.random().toString();\n    },\n    create_new_set: (e) => {\n        let f = this.sha((this.get_current_time() + this.get_random()));\n        return {\n            \"salt\": f,\n            \"password\": this.sha(f + e)\n        }\n    },\n    reproduce_set: (e, f) => {\n        return {\n            \"password\": this.sha(f + e)\n        }\n    }\n\n\n}\n\nexport default encrypt;"]},"metadata":{},"sourceType":"module"}