{"ast":null,"code":"import _assertThisInitialized from \"/Users/augustusrizza/javascript_projects/blog/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _classCallCheck from \"/Users/augustusrizza/javascript_projects/blog/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/augustusrizza/javascript_projects/blog/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/augustusrizza/javascript_projects/blog/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/augustusrizza/javascript_projects/blog/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/augustusrizza/javascript_projects/blog/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/augustusrizza/javascript_projects/blog/frontend/src/Comments.js\";\nimport keys from \"./lib/key\";\nimport React, { Component } from 'react';\nimport dateFormat from 'dateformat';\nimport auth from \"./auth\";\nimport env from \"./env\";\n\nvar Com =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Com, _Component);\n\n  function Com() {\n    _classCallCheck(this, Com);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Com).apply(this, arguments));\n  }\n\n  _createClass(Com, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10\n        },\n        __self: this\n      }, React.createElement(\"article\", {\n        className: \"uk-comment uk-comment-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        className: \"uk-comment-header uk-grid-medium uk-flex-middle\",\n        \"uk-grid\": \"true\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"uk-width-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        \"uk-icon\": \"icon: user; ratio: 2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"uk-width-expand\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, React.createElement(\"h4\", {\n        className: \"uk-comment-title uk-margin-remove\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, this.props.comment.user, React.createElement(\"ul\", {\n        className: \"uk-comment-meta uk-subnav uk-subnav-divider uk-margin-remove-top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, dateFormat(this.props.comment.date, \"dddd, mmmm dS, yyyy\")))))), React.createElement(\"div\", {\n        className: \"uk-comment-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, this.props.comment.comment))));\n    }\n  }]);\n\n  return Com;\n}(Component);\n\nvar AddComment =\n/*#__PURE__*/\nfunction (_Component2) {\n  _inherits(AddComment, _Component2);\n\n  function AddComment(props) {\n    var _this;\n\n    _classCallCheck(this, AddComment);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddComment).call(this, props));\n    _this.state = {\n      isUser: false,\n      newComment: \"\"\n    };\n    _this._handleCommentChange = _this._handleCommentChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this._submitForm = _this._submitForm.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(AddComment, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      auth.isSignedIn().then(function (data) {\n        _this2.setState({\n          isUser: data.isSignedIn\n        });\n      });\n    }\n  }, {\n    key: \"_submitForm\",\n    value: function _submitForm(e) {\n      e.preventDefault();\n      var comment = {\n        \"comment\": this.state.newComment,\n        \"date\": new Date(),\n        \"post_id\": window.location.href.split(\"/\")[4],\n        \"user\": localStorage.getItem(\"username\")\n      };\n      fetch(\"\".concat(env.getCurrent().api, \"new_comment\"), {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"client_api_key\": keys.blog_post_api_key,\n          comment: comment\n        })\n      }).then(function (Response) {\n        Response.json().then(function (res) {\n          res = JSON.parse(res);\n          console.log(res);\n        });\n      });\n    }\n  }, {\n    key: \"_handleCommentChange\",\n    value: function _handleCommentChange(e) {\n      this.setState({\n        newComment: e.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isUser) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, React.createElement(\"form\", {\n          onSubmit: this._submitForm,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96\n          },\n          __self: this\n        }, React.createElement(\"fieldset\", {\n          className: \"uk-fieldset\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97\n          },\n          __self: this\n        }, React.createElement(\"textarea\", {\n          className: \"uk-textarea\",\n          rows: \"5\",\n          placeholder: \"add a comment\",\n          onChange: this._handleCommentChange,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        }), React.createElement(\"input\", {\n          className: \"uk-button-primary uk-button-large\",\n          type: \"submit\",\n          value: \"add comment\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }))));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, \"You must\", React.createElement(\"a\", {\n          href: \"/signin\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, \"sign in\"), \"to add a comment\");\n      }\n    }\n  }]);\n\n  return AddComment;\n}(Component);\n\nvar Comments =\n/*#__PURE__*/\nfunction (_Component3) {\n  _inherits(Comments, _Component3);\n\n  function Comments(props) {\n    var _this3;\n\n    _classCallCheck(this, Comments);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Comments).call(this, props));\n    _this3.state = {\n      comments: null\n    };\n    return _this3;\n  }\n\n  _createClass(Comments, [{\n    key: \"getComments\",\n    value: function getComments() {\n      var _this4 = this;\n\n      function custom_sort(a, b) {\n        return new Date(a.date).getTime() - new Date(b.date).getTime();\n      }\n\n      console.log(\"getting comments\");\n      fetch(\"http://localhost:5000/comments/\".concat(this.props.post), {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify({\n          \"client_api_key\": keys.blog_post_api_key\n        })\n      }).then(function (Response) {\n        Response.json().then(function (res) {\n          if (res.length > 0) {\n            _this4.setState({\n              comments: res.sort(custom_sort)\n            });\n          } else {\n            _this4.setState({\n              comments: \"No Comments Yet\"\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var intervalId = setInterval(this.getComments.bind(this), 3000);\n      this.setState({\n        intervalId: intervalId\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      // use intervalId from the state to clear the interval\n      clearInterval(this.state.intervalId);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.comments !== null) {\n        switch (typeof this.state.comments) {\n          case \"object\":\n            return React.createElement(\"div\", {\n              className: \"uk-container uk-margin-large uk-width-1-2\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 167\n              },\n              __self: this\n            }, React.createElement(AddComment, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 168\n              },\n              __self: this\n            }), React.createElement(\"ul\", {\n              className: \"uk-comment-list\",\n              style: {\n                marginTop: \"30px !important\"\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 169\n              },\n              __self: this\n            }, this.state.comments.map(function (element, i) {\n              return React.createElement(Com, {\n                key: i,\n                comment: element,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 178\n                },\n                __self: this\n              });\n            })));\n\n          default:\n            return React.createElement(\"div\", {\n              className: \"uk-container uk-margin-large uk-width-1-2\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 185\n              },\n              __self: this\n            }, React.createElement(\"h4\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 186\n              },\n              __self: this\n            }, this.state.comments), React.createElement(AddComment, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 187\n              },\n              __self: this\n            }));\n        }\n      } else {\n        return React.createElement(\"div\", {\n          className: \"uk-transition-toggle\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 193\n          },\n          __self: this\n        }, React.createElement(\"center\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 194\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          \"uk-spinner\": \"ratio: 4.5\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195\n          },\n          __self: this\n        })));\n      }\n    }\n  }]);\n\n  return Comments;\n}(Component);\n\nexport default Comments;","map":{"version":3,"sources":["/Users/augustusrizza/javascript_projects/blog/frontend/src/Comments.js"],"names":["keys","React","Component","dateFormat","auth","env","Com","props","comment","user","date","AddComment","state","isUser","newComment","_handleCommentChange","bind","_submitForm","isSignedIn","then","data","setState","e","preventDefault","Date","window","location","href","split","localStorage","getItem","fetch","getCurrent","api","headers","method","body","JSON","stringify","blog_post_api_key","Response","json","res","parse","console","log","target","value","Comments","comments","custom_sort","a","b","getTime","post","length","sort","intervalId","setInterval","getComments","clearInterval","marginTop","map","element","i"],"mappings":"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","sourcesContent":["import keys from \"./lib/key\";\nimport React, {Component} from 'react';\nimport dateFormat from 'dateformat';\nimport auth from \"./auth\";\nimport env from \"./env\"\n\nclass Com extends Component {\n    render() {\n        return (\n            <li>\n                <article className=\"uk-comment uk-comment-primary\">\n                    <header\n                        className=\"uk-comment-header uk-grid-medium uk-flex-middle\"\n                        uk-grid=\"true\">\n                        <div className=\"uk-width-auto\">\n                            <span uk-icon=\"icon: user; ratio: 2\"></span>\n                        </div>\n                        <div className=\"uk-width-expand\">\n                            <h4 className=\"uk-comment-title uk-margin-remove\">\n                                {this.props.comment.user}\n                                <ul\n                                    className=\"uk-comment-meta uk-subnav uk-subnav-divider uk-margin-remove-top\">\n                                    <li>\n                                        {dateFormat(this.props.comment.date, \"dddd, mmmm dS, yyyy\")}\n                                    </li>\n                                </ul>\n                            </h4>\n                        </div>\n                    </header>\n                    <div className=\"uk-comment-body\">\n                        <p>{this.props.comment.comment}</p>\n                    </div>\n                </article>\n            </li>\n\n        );\n    }\n}\n\nclass AddComment extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isUser: false,\n            newComment: \"\"\n        }\n        this._handleCommentChange = this\n            ._handleCommentChange\n            .bind(this);\n        this._submitForm = this\n            ._submitForm\n            .bind(this);\n    }\n    componentWillMount() {\n        auth\n            .isSignedIn()\n            .then(data => {\n                this.setState({isUser: data.isSignedIn})\n            })\n    }\n    _submitForm(e) {\n        e.preventDefault();\n        let comment = {\n            \"comment\": this.state.newComment,\n            \"date\": new Date(),\n            \"post_id\": window\n                .location\n                .href\n                .split(\"/\")[4],\n            \"user\": localStorage.getItem(\"username\")\n        }\n        fetch(`${env.getCurrent().api}new_comment`, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify({\"client_api_key\": keys.blog_post_api_key, comment: comment})\n\n        }).then(Response => {\n            Response\n                .json()\n                .then(res => {\n                    res = JSON.parse(res)\n                    console.log(res)\n                })\n        });\n    }\n    _handleCommentChange(e) {\n        this.setState({newComment: e.target.value})\n    }\n    render() {\n        if (this.state.isUser) {\n            return (\n                <div>\n                    <form onSubmit={this._submitForm}>\n                        <fieldset className=\"uk-fieldset\">\n                            <textarea\n                                className=\"uk-textarea\"\n                                rows=\"5\"\n                                placeholder=\"add a comment\"\n                                onChange={this._handleCommentChange}></textarea>\n                            <input\n                                className=\"uk-button-primary uk-button-large\"\n                                type=\"submit\"\n                                value=\"add comment\"/>\n                        </fieldset>\n                    </form>\n                </div>\n            )\n        } else {\n            return <div>You must\n                <a href=\"/signin\">sign in</a>\n                to add a comment</div>\n        }\n    }\n}\n\nclass Comments extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            comments: null\n        }\n    }\n\n    getComments() {\n        function custom_sort(a, b) {\n            return new Date(a.date).getTime() - new Date(b.date).getTime();\n        }\n        console.log(\"getting comments\")\n        fetch(`http://localhost:5000/comments/${this.props.post}`, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: \"POST\",\n            body: JSON.stringify({\"client_api_key\": keys.blog_post_api_key})\n\n        }).then(Response => {\n            Response\n                .json()\n                .then(res => {\n                    if (res.length > 0) {\n                        this.setState({comments: res.sort(custom_sort)})\n                    } else {\n                        this.setState({comments: \"No Comments Yet\"})\n                    }\n                });\n        });\n    }\n\n    componentDidMount() {\n        let intervalId = setInterval(this.getComments.bind(this), 3000)\n        this.setState({intervalId: intervalId});\n    }\n    componentWillUnmount() {\n        // use intervalId from the state to clear the interval\n        clearInterval(this.state.intervalId);\n    }\n\n    render() {\n        if (this.state.comments !== null) {\n            switch (typeof(this.state.comments)) {\n                case \"object\":\n                    return (\n                        <div className=\"uk-container uk-margin-large uk-width-1-2\">\n                            <AddComment/>\n                            <ul\n                                className=\"uk-comment-list\"\n                                style={{\n                                marginTop: \"30px !important\"\n                            }}>\n                                {this\n                                    .state\n                                    .comments\n                                    .map((element, i) => {\n                                        return (<Com key={i} comment={element}/>)\n                                    })}\n                            </ul>\n                        </div>\n                    )\n                default:\n                    return (\n                        <div className=\"uk-container uk-margin-large uk-width-1-2\">\n                            <h4>{this.state.comments}</h4>\n                            <AddComment/>\n                        </div>\n                    )\n            }\n        } else {\n            return (\n                <div className=\"uk-transition-toggle\">\n                    <center>\n                        <span uk-spinner=\"ratio: 4.5\"></span>\n                    </center>\n                </div>\n            )\n        }\n    }\n}\n\nexport default Comments;"]},"metadata":{},"sourceType":"module"}