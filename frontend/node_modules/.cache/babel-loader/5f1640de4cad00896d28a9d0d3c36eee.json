{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\nvar CACHE = 'network-or-cache';\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    var precache = function precache() {\n      return caches.open(CACHE).then(function (cache) {\n        return cache.addAll(['./controlled.html', './asset']);\n      });\n    };\n\n    var fromNetwork = function fromNetwork(request, timeout) {\n      return new Promise(function (fulfill, reject) {\n        var timeoutId = setTimeout(reject, timeout);\n        fetch(request).then(function (response) {\n          clearTimeout(timeoutId);\n          fulfill(response);\n        }, reject);\n      });\n    };\n\n    var fromCache = function fromCache(request) {\n      return caches.open(CACHE).then(function (cache) {\n        return cache.match(request).then(function (matching) {\n          return matching || Promise.reject('no-match');\n        });\n      });\n    };\n\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('fetch', function (evt) {\n      console.log('The service worker is serving the asset.');\n      evt.respondWith(fromNetwork(evt.request, 400).catch(function () {\n        return fromCache(evt.request);\n      }));\n    });\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit http://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See http://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    });\n  }\n}","map":{"version":3,"sources":["/Users/augustusrizza/javascript_projects/blog/frontend/src/serviceWorker.js"],"names":["CACHE","isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","precache","caches","open","then","cache","addAll","fromNetwork","request","timeout","Promise","fulfill","reject","timeoutId","setTimeout","fetch","response","clearTimeout","fromCache","matching","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","evt","console","log","respondWith","catch","swUrl","checkValidServiceWorker","serviceWorker","ready","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","contentType","headers","get","status","indexOf","unregister","reload"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nvar CACHE = 'network-or-cache';\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('fetch', function (evt) {\n      console.log('The service worker is serving the asset.');\n\n      evt.respondWith(fromNetwork(evt.request, 400).catch(function () {\n        return fromCache(evt.request);\n      }));\n    });\n\n    function precache() {\n      return caches.open(CACHE).then(function (cache) {\n        return cache.addAll([\n          './controlled.html',\n          './asset'\n        ]);\n      });\n    }\n\n    function fromNetwork(request, timeout) {\n      return new Promise(function (fulfill, reject) {\n        var timeoutId = setTimeout(reject, timeout);\n        fetch(request).then(function (response) {\n          clearTimeout(timeoutId);\n          fulfill(response);\n\n        }, reject);\n      });\n    }\n\n    function fromCache(request) {\n      return caches.open(CACHE).then(function (cache) {\n        return cache.match(request).then(function (matching) {\n          return matching || Promise.reject('no-match');\n        });\n      });\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}"]},"metadata":{},"sourceType":"module"}